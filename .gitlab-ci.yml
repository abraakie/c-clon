image: gcc:latest

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

stages:
  - build
  - test

.setup:
  before_script:
    - apt-get update -qq
    - apt-get install -y cmake make gcovr

lint:
  stage: build
  before_script:
    - apt-get update -qq
    - apt-get install -y clang-tidy cppcheck codespell cmake
  script:
    - cppcheck --enable=all --inconclusive --xml --xml-version=2 --suppress=missingInclude --output-file=cppcheck-result.xml .
    - mkdir -p build
    - cd build
    - cmake -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
    - cd ..
    - find . -type f \( -name '*.c' -o -name '*.h' \) ! -path "*/_deps/*" | xargs clang-tidy -p build
    - codespell --skip="*.git,*.pdf,*/build/*"
  artifacts:
    reports:
      codequality: cppcheck-result.xml
    expire_in: 1 week
    paths:
      - cppcheck-result.xml
  allow_failure: true

build:
  extends: .setup
  stage: build
  script:
    - mkdir -p build
    - cd build
    - cmake -DCMAKE_BUILD_TYPE=Debug -DCMAKE_C_FLAGS="--coverage" -DCMAKE_EXE_LINKER_FLAGS="--coverage" ..
    - cmake --build . -j$(nproc)
  artifacts:
    paths:
      - build/

test:
  extends: .setup
  stage: test
  script:
    - cd build
    - ctest --verbose --output-on-failure --output-junit test_results.xml
    - gcovr --version
    - gcovr -r .. --cobertura coverage.xml --cobertura-pretty --verbose --gcov-ignore-parse-errors --filter ".*src/.*" --exclude ".*_deps/.*" --print-summary
  coverage: '/lines: \d+\.\d+\%/'
  artifacts:
    when: always
    reports:
      junit: build/test_results.xml
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml
    paths:
      - build/coverage.xml
      - build/test_results.xml
    expire_in: 1 week
